FROM {{ os_name }}:{{ os_version }}

LABEL tailor="environment"

SHELL ["/bin/bash", "-c"]

ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY

ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=en_US.UTF-8 \
    PYTHONUNBUFFERED=1 \
    ROS_HOME=/home/tailor/.ros

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
    locales \
    curl \
    gnupg \
    sudo \
    ccache \
    software-properties-common \
    expect \
    apt-transport-https \
    apt-transport-s3 && \
    locale-gen en_US.UTF-8 && \
    ccache -M 5G && \
    ccache --set-config=cache_dir=/ccache && \
    rm -rf /var/lib/apt/lists/*

# Create auth config file for accesing s3 via apt
RUN echo "AccessKeyId = $AWS_ACCESS_KEY_ID" | tee /etc/apt/s3auth.conf && \
    echo "SecretAccessKey = $AWS_SECRET_ACCESS_KEY" | tee -a /etc/apt/s3auth.conf && \
    echo "Token = ''" | tee -a /etc/apt/s3auth.conf && \
    echo "Region = '{{ bucket_region }}'" | tee -a /etc/apt/s3auth.conf

# Add package mirror
# TODO(pbovbel) read this from configuration
RUN curl -fsSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x142D5F1683E1528B" \
      | gpg --dearmor -o /etc/apt/trusted.gpg.d/tailor.gpg && \
    echo "deb [arch=amd64] s3://{{ bucket_name }}/{{ release_label }}/ubuntu {{ os_version }}-mirror main" >> /etc/apt/sources.list && \
    apt-get update && apt-get dist-upgrade -y && \
    apt-get install --no-install-recommends -y \
    python3-colcon-common-extensions && \
    rm -rf /var/lib/apt/lists/* 

# Install build and run dependencies
# TODO(pbovbel) install contrainted versions of packages rather than using 'regex_replace'
RUN apt-get update && RTI_NC_LICENSE_ACCEPTED=yes apt-get install --no-install-recommends -y \
  {{ build_depends | union(run_depends) | sort | join(' ') | regex_replace('\(.*?\)', '') }} && \
  rm -rf /var/lib/apt/lists/* 

# Create non-root user
ARG USER_NAME=tailor
RUN groupadd -r "$USER_NAME" && useradd -ms /bin/bash -g "$USER_NAME" -G sudo "$USER_NAME"
USER $USER_NAME

# Set workdir
WORKDIR /home/$USER_NAME
RUN mkdir -p "$ROS_HOME"
